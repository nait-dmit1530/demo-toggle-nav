body {
    background-color: #192f5e;
    font-family: sans-serif;
    color: #f5f5f5;
}

.flex-container {
    display: flex;
    /* puts button beside the heading
        NOTE: the button stretches to be the same height as h1 */
    align-items: center;
    /* shrinks the button by aligning all items with their center 
        (they no longer need to stretch to be the same height (which is the
         default for flex-items in a flex container)) */
    justify-content: space-between;
    /* moves the empty left-over space in our flex container to the middle
        causing the button to move to the furthest right */
}
p {
    color: #d5e294;
    border-bottom: 2px solid #d5e294;
    padding-bottom: 1rem;
    margin-bottom: 1rem;
    font-size: 1.777rem;
}
h2 {
    color: #fff;
    font-size: 3.157rem;
    margin-bottom: 2rem;
}


/* STEP 1 - Style the defaul nav in it's showing state first. Hide later 
    Start with the mobile view, style the layout and links for how they
    will look when visible.
*/

header {
    background-color: #fff;
    padding: 1rem;
}
header a {
    color: #3f3f3f;
    text-decoration: none;
    display: block;
}
.menu a:hover,
.menu a:active {
    background-color: gainsboro;
    border-radius: 4px;
}
.menu li {
    line-height: 40px;
    text-align: center;
}

button {
    background-color: #fff;
    border: none;
}

/* STEP 2 - Now let's hide the menu. Hidden will be the default load stage 
    If using display:none -- the menu cannot be transitioned (fades, etc.)
*/

header nav {
    /* display: none; */
    /* display: none cannot be transitioned */
    max-height: 0;
    overflow: hidden;
    transition: max-height 0.7s ease-in-out;
    /* 
    https://developer.mozilla.org/en-US/docs/Web/CSS/transition
    */

    position:absolute;
    /* position:absolute will make the menu disappear from the document flow
        and it will not leave a space where it was */
    top: 4.6875rem;
    left: 0;
    width: 100vw;
    /* this position is in relation to the viewport because it is not positioning
        to the parent container (parent container = position relative) */
    background-color: #fff;
}

/* STEP 3 - Create a special class that will show the menu.
    NOTE: This class will only exist in the CSS file for now.
    JavaScript will add this class to the markup for us as a "user event"
*/
.show-nav {
    /* display: block; */
    /* display: block is opposite of display: none */
    max-height: 16rem;
}


section {
    padding: 3.125rem;
    text-align: center;
    text-transform: uppercase;
}

/* STEP 4 - Add media query and show the nav by default for a 
    horizontal screen layout.
*/

@media screen and (min-width: 700px) {
    button.toggle-button {
        display: none;
        /* removes button from being displayed on the screen */
    }
    /* show the nav by default */
    header nav {
        max-height: 90px;
        overflow: visible;
        position: static;
        width: auto;
    }
    .inner-container {
        max-width: 1200px;
        margin: 0 auto;
        display: flex;
        /* makes the header and nav flex items inside this flex container */
        justify-content: space-between;
        /* takes the left over speace  */
        align-items: center;
        /* makes the flex items align in the middle (top to bottom) */
    }
    ul.menu {
        display: flex;
        gap: 1rem;
        /* add gap between flex items */
    }
    ul.menu a {
        padding: 0 0.5rem;
        /* adds some padding around the anchor flex items*/
    }
}